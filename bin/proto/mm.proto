// 采用的是类似JSON-RPC2.0的通讯方式
// web端主要传入method和uin，query和body直接将前端传的代入即可

syntax = "proto3";

// 命名空间
package mm;

// 定义服务接口
service socket {
	// 定义服务函数
	rpc get (JsonGet) returns (JsonRes) {}
	rpc post (JsonPost) returns (JsonRes) {}
	rpc cmd (JsonReq) returns (JsonRes) {}
}

// GET请求参数格式 用于查询或删除
message JsonGet {
	// 查询、删除, 建议传json格式字符串
	string query = 1;
	// 协议头
	map<string, string> headers = 2;
}

// POST请求参数格式 —— 用于添加或修改
message JsonPost {
	// 修改条件，建议传json格式字符串
	string query = 1;
	// 提交内容 可以传xml、json、form-data格式字符串，建议json格式
	string body = 2;
	// 协议头
	map<string, string> headers = 3;
}


// CMD请求参数格式
message JsonReq {
	// 请求方法，类名.函数名，通常类名为表名，函数名为增删改查等操作名，常见的函数名有：add增、del删、改set、get查、update更新、save备份、load加载备份、upload上传、download下载
	string method = 1;
	// 查询、删除、修改附加参数，修改时如果带有query，则修改所有查询条件符合query的, 建议传json格式字符串
	string query = 2;
	// 提交正文 可以传xml、json、form-data格式字符串，建议json格式
	string body = 3;
	// 请求的消息ID
	string id = 4;
	// 协议头
	map<string, string> headers = 5;
}

// 错误模型
message Error {
	// 错误码，0无错误、500服务端业务错误
	int32 code = 1;
	// 错误提示
	string message = 2;
}

// 响应
message JsonRes {
	// 错误模型，如果存在错误，则返回错误模型
	Error error = 1;
	// 接口执行结果，通常返回json格式字符串，直接返回给前端即可
	string result = 2;
	// 对应请求的消息ID，用于识别对那个请求做响应
	string id = 3;
}
